#include "main.h"
#include "lemlib/api.hpp" // IWYU pragma: keep
#include "pros/abstract_motor.hpp"



// left motor group
pros::MotorGroup left_motor_group({-12, -11, -17}, pros::MotorGears::blue);
// right motor group
pros::MotorGroup right_motor_group({20, 18, 19}, pros::MotorGears::green);

// drivetrain settings
lemlib::Drivetrain drivetrain(&left_motor_group, // left motor group
                              &right_motor_group, // right motor group
                              10, // 10 inch track width
                              lemlib::Omniwheel::NEW_4, // using new 4" omnis
                              360, // drivetrain rpm is 360
                              2 // horizontal drift is 2 (for now)
);

// imu
pros::Imu imu(10);



/*NO ODOMETRY BUT THESE ARE PLACEHOLDERS IN CASE WE DO GET THEM IN THE FUTURE*/

// horizontal tracking wheel encoder
pros::Rotation horizontal_encoder(0);
// vertical tracking wheel encoder
pros::adi::Encoder vertical_encoder(0, 0, true);
// horizontal tracking wheel
lemlib::TrackingWheel horizontal_tracking_wheel(&horizontal_encoder, lemlib::Omniwheel::NEW_275, -5.75);
// vertical tracking wheel
lemlib::TrackingWheel vertical_tracking_wheel(&vertical_encoder, lemlib::Omniwheel::NEW_275, -2.5);

// odometry settings
lemlib::OdomSensors sensors(nullptr, // vertical tracking wheel 1, set to null
                            nullptr, // vertical tracking wheel 2, set to nullptr as we are using IMEs
                            nullptr, // horizontal tracking wheel 1
                            nullptr, // horizontal tracking wheel 2, set to nullptr as we don't have a second one
                            &imu // inertial sensor
);

// lateral PID controller
lemlib::ControllerSettings lateral_controller(10, // proportional gain (kP)
                                              0, // integral gain (kI)
                                              3, // derivative gain (kD)
                                              3, // anti windup
                                              1, // small error range, in inches
                                              100, // small error range timeout, in milliseconds
                                              3, // large error range, in inches
                                              500, // large error range timeout, in milliseconds
                                              20 // maximum acceleration (slew)
);

// angular PID controller
lemlib::ControllerSettings angular_controller(2, // proportional gain (kP)
                                              0, // integral gain (kI)
                                              10, // derivative gain (kD)
                                              0, // anti windup
                                              0, // small error range, in degrees
                                              0, // small error range timeout, in milliseconds
                                              0, // large error range, in degrees
                                              0, // large error range timeout, in milliseconds
                                              0 // maximum acceleration (slew)
);

// create the chassis
lemlib::Chassis chassis(drivetrain, // drivetrain settings
                        lateral_controller, // lateral PID settings
                        angular_controller, // angular PID settings
                        sensors // odometry sensors
);
#define INTAKE_PORT 2
#define ARM_PORT 10
#define BACK_CLAMP 'C'
#define PUSH 'A'
#define CLAMP 'B'

// initialize function. Runs on program startup
void initialize() {
    pros::lcd::initialize(); // initialize brain screen
    chassis.calibrate(); // calibrate sensors
pros::Motor Intake(INTAKE_PORT);
Intake.set_gearing(pros::E_MOTOR_GEAR_BLUE);
Intake.set_encoder_units(pros::E_MOTOR_ENCODER_DEGREES);
pros::Motor Arm(ARM_PORT);
Arm.set_gearing(pros::E_MOTOR_GEAR_RED);
Arm.set_encoder_units(pros::E_MOTOR_ENCODER_DEGREES);
pros::adi::DigitalOut BackClamp(BACK_CLAMP);
pros::adi::DigitalOut Push(PUSH);
pros::adi::DigitalOut Clamp(CLAMP);
    pros::Controller master(pros::E_CONTROLLER_MASTER);
    // print position to brain screen
    pros::Task screen_task([&]() {
        while (true) {
            // print robot location to the brain screen
            pros::lcd::print(0, "X: %f", chassis.getPose().x); // x
            pros::lcd::print(1, "Y: %f", chassis.getPose().y); // y
            pros::lcd::print(2, "Theta: %f", chassis.getPose().theta); // heading
            // delay to save resources
            pros::delay(20);
        }
    });
  
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

#define INTAKE_PORT 2
#define ARM_PORT 10
#define BACK_CLAMP 'C'
#define PUSH 'A'
#define CLAMP 'B'

void autonomous() {
    pros::lcd::initialize(); // initialize brain screen
    chassis.calibrate(); // calibrate sensors
pros::Motor Intake(INTAKE_PORT);
Intake.set_gearing(pros::E_MOTOR_GEAR_BLUE);
Intake.set_encoder_units(pros::E_MOTOR_ENCODER_DEGREES);
pros::Motor Arm(ARM_PORT);
Arm.set_gearing(pros::E_MOTOR_GEAR_RED);
Arm.set_encoder_units(pros::E_MOTOR_ENCODER_DEGREES);
pros::adi::DigitalOut BackClamp(BACK_CLAMP);
pros::adi::DigitalOut Push(PUSH);
pros::adi::DigitalOut Clamp(CLAMP);
    pros::Controller master(pros::E_CONTROLLER_MASTER);





}

pros::Controller controller(pros::E_CONTROLLER_MASTER);
#define INTAKE_PORT 2
#define ARM_PORT 10
#define BACK_CLAMP 'C'
#define PUSH 'A'
#define CLAMP 'B'
void opcontrol() {
    pros::lcd::initialize(); // initialize brain screen
    chassis.calibrate(); // calibrate sensors
pros::Motor Intake(INTAKE_PORT);
Intake.set_gearing(pros::E_MOTOR_GEAR_BLUE);
Intake.set_encoder_units(pros::E_MOTOR_ENCODER_DEGREES);
pros::Motor Arm(ARM_PORT);
Arm.set_gearing(pros::E_MOTOR_GEAR_RED);
Arm.set_encoder_units(pros::E_MOTOR_ENCODER_DEGREES);
pros::adi::DigitalOut BackClamp(BACK_CLAMP);
pros::adi::DigitalOut Push(PUSH);
pros::adi::DigitalOut Clamp(CLAMP);
    pros::Controller master(pros::E_CONTROLLER_MASTER);
    Arm.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);
    // loop forever
    while (true) {
        // get left y and right y positions
        int leftY = controller.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
        int rightY = controller.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_Y);

        // move the robot
        chassis.tank(leftY, rightY);




        if(master.get_digital(pros::E_CONTROLLER_DIGITAL_R2)){
            Intake.move_velocity(600);
        }
        else if(master.get_digital(pros::E_CONTROLLER_DIGITAL_R1)){
            Intake.move_velocity(-600);
        }

        else{
            Intake.move_velocity(0);
        }

        if(master.get_digital(pros::E_CONTROLLER_DIGITAL_L2)){
            Arm.move_velocity(25);
        }
        else if(master.get_digital(pros::E_CONTROLLER_DIGITAL_L1)){
            Arm.move_velocity(-25);
        }
        else{
            Arm.move_velocity(0);
        }

        if(master.get_digital(pros::E_CONTROLLER_DIGITAL_B)){
            BackClamp.set_value(true);
        }

        else if(master.get_digital(pros::E_CONTROLLER_DIGITAL_DOWN)){
            BackClamp.set_value(false);
        }

        if(master.get_digital(pros::E_CONTROLLER_DIGITAL_A)){
            Arm.move_absolute(10, 25);
        }

        // delay to save resources
        pros::delay(25);
    }
}
